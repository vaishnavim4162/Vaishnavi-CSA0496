#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#define N 5
#define THINKING 2
#define HUNGRY 1
#define EATING 0
#define LEFT (phil_num + 4) % N
#define RIGHT (phil_num + 1) % N
int state[N];
int phil_num[N] = { 0, 1, 2, 3, 4 };
sem_t mutex;
sem_t S[N];
void test(int phil_num) {
    if (state[phil_num] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {
        state[phil_num] = EATING;
        printf("Philosopher %d is Eating\n", phil_num + 1);
        sem_post(&S[phil_num]);
    }
}
void take_fork(int phil_num) {
    sem_wait(&mutex);
    state[phil_num] = HUNGRY;
    printf("Philosopher %d is Hungry\n", phil_num + 1);
    test(phil_num);
    sem_post(&mutex);
    sem_wait(&S[phil_num]);
}
void put_fork(int phil_num) {
    sem_wait(&mutex);
    state[phil_num] = THINKING;
    printf("Philosopher %d is Thinking\n", phil_num + 1);
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}
void* philosopher(void* num) {
    while (1) {
        int* i = num;
        sleep(1);
        take_fork(*i);
        sleep(0);
        put_fork(*i);
    }
}
int main() {
    int i;
    pthread_t thread_id[N];
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++)
        sem_init(&S[i], 0, 0);
    for (i = 0; i < N; i++) {
        pthread_create(&thread_id[i], NULL, philosopher, &phil_num[i]);
        printf("Philosopher %d is Thinking\n", i + 1);
    }
    for (i = 0; i < N; i++)
        pthread_join(thread_id[i], NULL);
    return 0;
}
